{ This file is part of classwork.pp, a library of basic and useful classes.

  This program is free software: you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 3 of the License or, at your
  option, any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABLITY
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
  License for more details.

  You should have received a copy of the GNU General Public License along
  with this program.  If not, see <http://www.gnu.org/licenses/>.
}
{$IFDEF ReadInterface}
{ An object that can produce and stream a string representation of itself. }
type APrintingObject = class(AnObject, CanPrint)
  protected
    { Caches the display name generated by a call to
      @link(APrintingObject.displayName).
    }
    myDisplayName: string;

  public
    { Initializer}
    function init: boolean; override;

    { Constructs a "pretty" class name for the class.

      This method operates on the assumption that:
      @unorderedList(
        @item(The class name is an English name -- this method is not
              internationalized.)
        @item(The class name begins with "A" or "An".)
        @item(The class name can be separated into meaningful words wherever
              an upper-case character is found.)
      )

      A class named "ABalloonAnimal" will be rendered as "a balloon animal"
      by this method.  The routine calls @link(Charstring.expandCamelCase) on
      the result of a call to @code(TObject.className), then converts the
      result to lower-case before returning it.

      This routine presently only operates on ASCII strings.

      In the base implementation of this method, the result of calling this
      routine is cached, since there is no need to recalculate the display name
      every time the method is called unless it becomes possible to dynamically
      alter class names.  The cached result is returned for subsequent calls.
    }
    function displayName: string; virtual;

    { Constructs and returns a string representation of the object.

      The base implmentation of this method simply calls
      @link(APrintingObject.displayName) and returns the result of that call.

      Descendant classes should override this method as follows: @unorderedList(
        @item(If the instance contains a value of some kind, a string
          representation of that value should be returned.)
        @item(If the instance associates a search key of some kind with a value,
          then a string representation of both the search key and the value
          should be returned.)
        @item(Otherwise, a descriptive representation of the class itself should
          be returned.)
      )

      Adhering to the above two criteria will greatly facilitate debugging.
    }
    function toString: string; override;

    { Print a string representation of the object to the specified stream.

      The base implementation of this method first calls
      @link(APrintingObject.toString) and then prints the result of that call
      to @code(Dest).

      @returns(The total number of bytes written to @code(Dest).)
    }
    function printTo(const Dest: ATextOutputStream;
      prefix: AnsiString = '';
      suffix: AnsiString = ''): TStreamIOSize; virtual;
end;
{$ENDIF}
{$IFDEF ReadImplementation}
// APrintingObject *************************************************************
// Initializer
function APrintingObject.init: boolean;

begin
  myDisplayName := '';

  result := inherited init;
end;

// Construct a display name for the object
function APrintingObject.displayName: string;

begin
  // Use the cached result, if available
  if myDisplayName <> '' then
    result := myDisplayName

  else begin
    myDisplayName := Charstring.expandCamelCase(Self.className);
    myDisplayName := Charstring.toLowerCase(myDisplayName);
    result := myDisplayName;
  end;
end;

// Construct a string representation of the object
function APrintingObject.toString: string;

begin
  result := Self.displayName;
end;

// Print a string representation of the object to the specified stream
function APrintingObject.printTo(const Dest: ATextOutputStream;
  prefix: AnsiString = '';
  suffix: AnsiString = ''): TStreamIOSize;

begin
  result := 0;
  if Dest <> nil then
  begin
    result := Dest.printEach([prefix, Self.toString, suffix]);
  end;
end;
{$ENDIF}


